"""
Django settings for CMSC_126_Long_Exam_2_Personal_Budget_Tracker project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-5mi46^azplgapc$^pcpxk)4$lfk1l^73l107%iqr$nn^(#=cq#')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'true').lower() == 'true'

# Configure allowed hosts based on environment
ALLOWED_HOSTS = ['localhost', '127.0.0.1']  # Always include localhost for development

# Check for deployment environments using environment variables
if os.environ.get('RENDER', '').lower() == 'true':
    # Add specific Render domain and wildcard for any future subdomain changes
    render_site = os.environ.get('RENDER_EXTERNAL_URL', '')
    if render_site:
        # Extract the host from the full URL if needed
        from urllib.parse import urlparse
        render_host = urlparse(render_site).netloc or render_site
        ALLOWED_HOSTS.append(render_host)

    # Include the current specific domain and the wildcard
    ALLOWED_HOSTS.extend([
        'cmsc-126-long-exam-2-personal-budget.onrender.com',
        '.onrender.com',  # Wildcard for all Render subdomains
    ])

# Check for Fly.io deployment
if 'FLY_APP_NAME' in os.environ:
    ALLOWED_HOSTS.extend([
        f"{os.environ.get('FLY_APP_NAME')}.fly.dev",  # Specific app domain
        '.fly.dev',  # Wildcard for all Fly.io subdomains
    ])

# For any production environment (This serves as a fallback)
if not DEBUG:
    # Get the host from the ALLOWED_HOST environment variable if set
    allowed_host = os.environ.get('ALLOWED_HOST')
    if allowed_host:
        ALLOWED_HOSTS.append(allowed_host)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'crispy_forms',
    'crispy_tailwind',
    'django_htmx',
    'django_filters',

    # Local apps
    'Gastadorcheck.apps.GastadorcheckConfig',
    'users',
    'transactions',
    'categories',
    'budgets',
    'reports',
    'core',
]

# Crispy forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise middleware for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
]

ROOT_URLCONF = 'CMSC_126_Long_Exam_2_Personal_Budget_Tracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CMSC_126_Long_Exam_2_Personal_Budget_Tracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# For Fly.io with persistent SQLite
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join('/app/data', 'db.sqlite3') if 'FLY_APP_NAME' in os.environ else BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'  # Configure WhiteNoise for efficient static file serving

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Authentication settings
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'